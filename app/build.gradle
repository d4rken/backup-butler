plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'de.mannodermaus.android-junit5'
    id 'androidx.navigation.safeargs.kotlin'
    id 'com.bugsnag.android.gradle'
    id 'dagger.hilt.android.plugin'
}

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def buildTime = new Date().format("yyyy-MM-dd'T'HH:mm:ss'Z'", TimeZone.getTimeZone("GMT+1"))

android {
    def packageName = "eu.darken.bb"

    compileSdkVersion buildConfig.compileSdk

    defaultConfig {
        applicationId "${packageName}"

        minSdkVersion buildConfig.minSdk
        targetSdkVersion buildConfig.targetSdk

        versionCode buildConfig.version.code
        versionName buildConfig.version.name

        buildConfigField "String", "GITSHA", "\"${gitSha}\""
        buildConfigField "String", "BUILDTIME", "\"${buildTime}\""

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildFeatures {
        viewBinding true
    }

    signingConfigs {
        release {}
    }
    def signingPropFile = new File(System.properties['user.home'], ".appconfig/${packageName}/signing.properties")
    if (signingPropFile.canRead()) {
        Properties signingProps = new Properties()
        signingProps.load(new FileInputStream(signingPropFile))
        signingConfigs {
            release {
                storeFile new File(signingProps['release.storePath'])
                keyAlias signingProps['release.keyAlias']
                storePassword signingProps['release.storePassword']
                keyPassword signingProps['release.keyPassword']
            }
        }
    }

    buildTypes {
        def proguardRulesRelease = fileTree(dir: 'proguard', include: ['*.pro']).asList().toArray()
        project.logger.lifecycle("Picked up proguard release files: " + proguardRulesRelease.toString())

        debug {
            lintOptions {

            }
            ext.enableBugsnag = true
            buildConfigField "boolean", "BETA", "true"
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt')
            proguardFiles proguardRulesRelease
            proguardFiles 'proguard-rules-debug.pro'
        }
        beta {
            signingConfig signingConfigs.release
            lintOptions {
                disable 'MissingTranslation'
                disable 'ExtraTranslation'
            }
            ext.enableBugsnag = true
            buildConfigField "boolean", "BETA", "true"
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt')
            proguardFiles proguardRulesRelease
            matchingFallbacks = ['release']
        }
        release {
            signingConfig signingConfigs.release
            lintOptions {
                abortOnError true
                fatal 'StopShip'
            }
            ext.enableBugsnag = true
            buildConfigField "boolean", "BETA", "false"
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt')
            proguardFiles proguardRulesRelease
        }
        applicationVariants.all { variant ->
            if (variant.buildType.name == "debug") {
                variant.mergedFlavor.resourceConfigurations.clear()
                variant.mergedFlavor.resourceConfigurations.add("en")
                variant.mergedFlavor.resourceConfigurations.add("de")
            } else if (variant.buildType.name != "debug") {
                variant.outputs.each { output ->
                    output.outputFileName = "${packageName}-v" + defaultConfig.versionName + "(" + defaultConfig.versionCode + ")-" + variant.buildType.name.toUpperCase() + "-" + gitSha + ".apk"
                }
            }
        }
    }
    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = '1.8'
            freeCompilerArgs = [
                    '-XXLanguage:+InlineClasses',
                    '-Xopt-in=kotlin.ExperimentalStdlibApi',
                    '-Xopt-in=kotlin.contracts.ExperimentalContracts',
                    "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi",
                    "-Xuse-experimental=kotlinx.coroutines.FlowPreview",
                    "-Xuse-experimental=kotlin.time.ExperimentalTime",
            ]
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'

    implementation project(':bb-common')
    implementation project(':bb-root')

    implementation "org.jetbrains.kotlin:kotlin-reflect:${versions.kotlin.core}"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.kotlin.coroutines}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.kotlin.coroutines}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-rx3:${versions.kotlin.coroutines}"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${versions.kotlin.coroutines}"

    implementation 'androidx.core:core-ktx:1.6.0'

    // Support libs
    implementation 'androidx.annotation:annotation:1.2.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'

    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.0-beta01'
    implementation 'androidx.lifecycle:lifecycle-reactivestreams-ktx:2.4.0-beta01'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-savedstate:2.4.0-beta01'
    implementation 'androidx.lifecycle:lifecycle-common-java8:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-process:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'

    implementation 'androidx.activity:activity-ktx:1.4.0-alpha02'
    implementation 'androidx.fragment:fragment-ktx:1.4.0-alpha09'
    implementation 'androidx.viewpager2:viewpager2:1.1.0-beta01'
    implementation 'androidx.recyclerview:recyclerview-selection:1.1.0'
    implementation 'androidx.preference:preference-ktx:1.1.1'
    implementation 'androidx.documentfile:documentfile:1.0.1'
    implementation 'androidx.core:core-splashscreen:1.0.0-alpha02'

    implementation "androidx.fragment:fragment-ktx:1.4.0-alpha09"

    implementation "androidx.navigation:navigation-fragment-ktx:${versions.androidx.navigation}"
    implementation "androidx.navigation:navigation-ui-ktx:${versions.androidx.navigation}"

    implementation 'com.airbnb.android:lottie:3.5.0'

    def work_version = "2.7.0"
    implementation "androidx.work:work-runtime:${work_version}"
    testImplementation "androidx.work:work-testing:${work_version}"

    // Flow
    def flowbinding_version = "1.2.0"

    implementation "io.github.reactivecircus.flowbinding:flowbinding-android:${flowbinding_version}"

    implementation "io.github.reactivecircus.flowbinding:flowbinding-activity:${flowbinding_version}"
    implementation "io.github.reactivecircus.flowbinding:flowbinding-appcompat:${flowbinding_version}"
    implementation "io.github.reactivecircus.flowbinding:flowbinding-core:${flowbinding_version}"
    implementation "io.github.reactivecircus.flowbinding:flowbinding-drawerlayout:${flowbinding_version}"
    implementation "io.github.reactivecircus.flowbinding:flowbinding-lifecycle:${flowbinding_version}"
    implementation "io.github.reactivecircus.flowbinding:flowbinding-navigation:${flowbinding_version}"
    implementation "io.github.reactivecircus.flowbinding:flowbinding-preference:${flowbinding_version}"
    implementation "io.github.reactivecircus.flowbinding:flowbinding-recyclerview:${flowbinding_version}"
    implementation "io.github.reactivecircus.flowbinding:flowbinding-swiperefreshlayout:${flowbinding_version}"
    implementation "io.github.reactivecircus.flowbinding:flowbinding-viewpager:${flowbinding_version}"
    implementation "io.github.reactivecircus.flowbinding:flowbinding-viewpager2:${flowbinding_version}"

    implementation "io.github.reactivecircus.flowbinding:flowbinding-material:${flowbinding_version}"

    // IO
    implementation("com.squareup.okio:okio:2.10.0")

    // Serialization
    implementation "com.squareup.moshi:moshi:1.12.0"
    implementation "com.squareup.moshi:moshi-adapters:1.9.2"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:1.12.0"

    implementation 'org.apache.commons:commons-compress:1.21'

    // ROOM
    def room_version = "2.4.0-alpha04"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    implementation "androidx.room:room-rxjava3:$room_version"
    testImplementation "androidx.room:room-testing:$room_version"

    //Dagger
    implementation "com.google.dagger:dagger:${versions.dagger}"
    implementation "com.google.dagger:dagger-android:${versions.dagger}"

    kapt "com.google.dagger:dagger-compiler:${versions.dagger}"
    kapt "com.google.dagger:dagger-android-processor:${versions.dagger}"

    implementation "com.google.dagger:hilt-android:${versions.dagger}"
    kapt "com.google.dagger:hilt-android-compiler:${versions.dagger}"

    testImplementation "com.google.dagger:hilt-android-testing:${versions.dagger}"
    kaptTest "com.google.dagger:hilt-android-compiler:${versions.dagger}"

    androidTestImplementation "com.google.dagger:hilt-android-testing:${versions.dagger}"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:${versions.dagger}"

    implementation 'androidx.hilt:hilt-work:1.0.0'
    kapt 'androidx.hilt:hilt-compiler:1.0.0'
    implementation 'androidx.work:work-runtime-ktx:2.7.0'

    // Glide
    implementation 'com.github.bumptech.glide:glide:4.9.0'
    kapt 'com.github.bumptech.glide:compiler:4.9.0'

    // Root
    implementation 'eu.chainfire:libsuperuser:+'

    // Rx
    implementation "io.reactivex.rxjava3:rxjava:${versions.rxjava}"
    implementation "io.reactivex.rxjava3:rxandroid:${versions.rxandroid}"
    implementation "io.reactivex.rxjava3:rxkotlin:${versions.rxkotlin}"
    implementation 'com.jakewharton.rx3:replaying-share:3.0.0'
    implementation "com.jakewharton.rx3:replaying-share-kotlin:3.0.0"

    implementation "eu.darken.rxshell:core:${versions.rxshell}"
    implementation "eu.darken.rxshell:root:${versions.rxshell}"

    // Debug
    implementation "com.jakewharton.timber:timber:${versions.timber}"
//    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.0-beta-3'
    implementation "com.uber.rxdogtag2:rxdogtag:2.1.0-SNAPSHOT"
    implementation 'com.bugsnag:bugsnag-android:5.9.2'

    /**
     * Unit testing
     */
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.7.1"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.7.1"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.7.1"
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine:5.7.1")

    testImplementation "io.mockk:mockk:1.12.0"
    testImplementation "io.kotest:kotest-runner-junit5:4.6.2"
    testImplementation "io.kotest:kotest-assertions-core-jvm:4.6.2"
    testImplementation "io.kotest:kotest-property-jvm:4.6.2"

    testImplementation 'org.awaitility:awaitility:4.0.2'
    testImplementation 'org.awaitility:awaitility-kotlin:4.0.2'

    testImplementation 'androidx.test.ext:junit:1.1.3'

    // A specific version just used within tests to format output when we don't want or can mock JSONObject
    //noinspection GradleDependency
    testImplementation 'org.json:json:20140107'

    testImplementation 'org.robolectric:robolectric:4.3.1'
    // Robolectric requires jUnit4
    testImplementation "androidx.test.ext:junit:1.1.1"
    testImplementation "junit:junit:4.13"
    testImplementation "org.robolectric:robolectric:4.3.1"


    /**
     * Instrumentation testing
     */
    androidTestImplementation "org.mockito:mockito-core:2.26.0"
    androidTestImplementation 'org.mockito:mockito-android:2.23.0'
    androidTestImplementation 'com.github.tmurakami:dexopener:1.0.2'

    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.2.0'
    androidTestImplementation 'androidx.test.espresso.idling:idling-concurrent:3.2.0'
}